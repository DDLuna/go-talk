Golang Talk
Buenos Aires - January 2020

Damian Luna

* ¿Qué es Go?

Historia

Original Designers:
- Robert Griesemer
- Rob Pike
- Ken Thompson


* ¿Por qué?
Los diseñadores no estaban satisfechos con los lenguajes que tenían disponibles para desarrollar server side. En especial con tiempo de compilación.

    Computers had become enormously quicker since languages such as C, C++ and Java were first
    developed but the act of programming had not itself advanced nearly as much. Also, it was
    clear that multiprocessors were becoming universal but most languages offered little help
    to program them efficiently and safely.

* Objetivos
- Simple
- Rápido
- Concurrente

* Quiénes actualmente utilizan Go?

- Mercadolibre 
- YouTube 
- Google
- Microsoft
- Uber
- SpaceX
- Facebook
- Github
- Netflix
- Twitch

- [[https://github.com/golang/go/wiki/GoUsers][Otros...]]

* ¿Proyectos hechos en GO?

Docker
Kubernetes

* Go Basics

- Fuertemente tipado
- Inferencia de tipos
- Funciones son _first_ _class_ _citizens_: las funciones pueden ser pasadas como parámetros
- Parámetros pasados siempre por _valor_, pero tenemos punteros
- Gargabage Collector
- "Semi” Orientado a objetos -> _Composition_, _Encapsulation_, _Polymorphism_, not _Inheritance_
- Built in Web Server
- Built in Testing framework

* Hello world!!

.play -edit ./src/hello_world/hello_world.go

Comandos básicos desde consola

	go command [arguments]

	go build     Compila paquetes y dependencias
	go clean     Remueve archivos object     
	go get       Descarga e instala paquetes y dependencias
	go install   Compila e instala paquetes y dependencias
	go run       Compila y corre paquetes y dependencias
	go test      Testea paquetes
	go fmt       Formatea tu código

* Keywords

- Los Keywords son palabras reservadas
- No pueden ser usados como identificadores
- Go apunta a ser simple y tener pocos keywords

.image ./img/keywords.png _ _

* Tipos Básicos

- bool
- int  int8  int16  int32  int64
- uint uint8 uint16 uint32 uint64 uintptr
- float32 float64
- complex64 complex128
- [[https://blog.golang.org/strings][string]]
- byte // alias for uint8
- rune // alias for int32 - unicode code point

* Constantes

- Pueden ser del tipo: rune, string, boolean o valores numéricos

- Ejemplos:

	const World = "世界"
	const Truth = true
    const Num = 13

* Inicialización de Variables

	var s string
	var s string = ""
	var s = ""
	s := ""

* Paquetes

.play -edit ./src/import_package/import_package.go

* Tipos de if

	if x < 0 { }

	if v := math.Pow(x, n); v < lim {}

	if ... {} else { }

* Iteraciones #1

_for_initialization;_condition;_post_{_}_

.play -edit ./src/for_1/for_1.go

* Iteraciones #2

_for_condition_{_}_

.play -edit ./src/for_2/for_2.go

* Iteraciones #3

_for_{_}_

.play -edit ./src/for_3/for_3.go

* Iteraciones #4

_using_range_

.play -edit ./src/for_4/for_4.go

* Switch

.play -edit ./src/switch/switch.go

* Funciones

.play -edit ./src/functions/functions.go

* Punteros

.play -edit ./src/prts/prts.go

* Structs

	type tree struct {
		value int
		left  *tree
		right *tree
	}

	func (t *tree) add(newValue int) {
		if t == nil {
			t = &tree{value: newValue}
		}
		if t.value > newValue {
			t.right.add(newValue)
		} else {
			t.left.add(newValue)
		}
	}

* Slices

.play -edit ./src/slices/slices.go

* Maps

.play -edit ./src/maps/maps.go

* Funciones como valores

* Composición

- Funciona metiendo un struct adentro de otro struct
- Se puede acceder a los métodos y datos exportados
- Los structs internos son "promovidos"

* Composición

.play -edit ./src/composition/composition.go

* Interfaces

.play -edit ./src/interfaces/interfaces.go

* Interfaz vacia

	func(param interface{}) {
		fmt.Println(param)
	}

* Testing

- Cada archivo con el suffix _test es un archivo de test para Go
- En los tests se pueden correr tests, benchamarks y Ejemplos

- Cada funcion con el nombre Test(*) es una funcion de Test
- Cada funcion con el nombre Benchmark(*) es una funcion de Benchmark
- Cada funcion con el nombre Example(*) es una function de Ejemplo


* Test

.play -edit ./src/interfaces/interfaces_test.go

* Testify

Framework que le agrega asserts....

* Errores

.play -edit ./src/errors/errors.go

* Defer

.play -edit ./src/defer/defer.go

* Panic

Similar a las excepciones en otros lenguajes, es un error irrecuperable
Panic aborta la ejecución y corre los defers pendientes recursivamante del callstack
Solamente frena con un recover(), que no debería usarse

.play -edit ./src/panic/panic.go

* Goroutines

Una goroutine es un hilo liviano que permite la ejecución de código concurrente.
Todo programa de go tiene al menos una goroutine main que es la primera creada al comienzo.

.play -edit ./src/goroutines/goroutines.go

* Wait Group

.play -edit ./src/goroutines_2/goroutines_2.go

* Channels

Creación de un channel:

	var sChannel chan string = make(chan string)

El operador <- envia información a un channel:

	sChannel <- "hello"

y recibw información desde él:

	var s string = <- sChannel

los channels son bloqueantes, es decir, si un channel está vacio se bloquea hasta que contenga algún mensaje, y si el channel está lleno espera a poder encolar un mensaje

* Channels 2
Buffered channel:

	var sChannel chan string = make(chan string, 100)

close() cierra un channel para indicar a sus consumers que no se van a enviar más elementos a ese channel

	close(intChannel)

los consumers pueden chequear el status del channel con el segundo parametro de la expresión:

	v, ok := <- sChannel

* Wait con channels

.play -edit ./src/chan/chan.go

* Web framework: gin-gonic

	go get -u github.com/gin-gonic/gin

* Simple de usar

.play -edit ./src/api/server.go


